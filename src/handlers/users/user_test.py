from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery, ReplyKeyboardRemove

from src.keayboards.main_menu import main_menu_buttons
from src.loader import dp
from src.states.user_test_state import UserTestState

text = '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞'
a = UserTestState

choices = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text='–î–∞', callback_data='1'
            ),
            InlineKeyboardButton(
                text='–ù–µ—Ç', callback_data='0'
            ),
        ],
    ],
    row_width=2
)


@dp.message_handler(Text(equals='‚ùï –ü—Ä–æ–π–¥—É –ª–∏ —è –∫ –≤–∞–º?'))
async def test_user_capacity(message: Message):
    await message.answer('–°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?', reply_markup=ReplyKeyboardRemove())
    await UserTestState.age.set()


@dp.message_handler(state=UserTestState.age)
async def get_age(message: Message, state: FSMContext):
    try:
        int(message.text)
    except ValueError:
        await message.answer(
            '–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ 0Ô∏è‚É£9Ô∏è‚É£')
        return
    await state.update_data(age=int(message.text))
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–Ω—è–ª. –í—ã –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ üá∑üá∫",
        reply_markup=choices
    )
    await UserTestState.nationality.set()


@dp.callback_query_handler(text=['1', '0'], state=UserTestState.nationality)
async def get_nationality(call: CallbackQuery, state: FSMContext):
    await state.update_data(nationality=int(call.data))
    await call.message.answer(
        "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! –ü–æ–Ω—è–ª. –ò–º–µ–ª–∏ –ª–∏ –≤—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–æ–Ω–æ–º ‚ùå",
        reply_markup=choices
    )
    await UserTestState.has_crime.set()


@dp.callback_query_handler(text=['1', '0'], state=UserTestState.has_crime)
async def has_crime(call: CallbackQuery, state: FSMContext):
    await state.update_data(has_crime=int(call.data))
    await call.message.answer(
        "–ü–æ—á—Ç–∏ –≤—Å–µ! –£–ø–æ—Ç—Ä–µ–±–ª—è–ª–∏ –ª–∏ –≤—ã –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏ üíä", reply_markup=choices
    )
    await UserTestState.try_drugs.set()


@dp.callback_query_handler(text=['1', '0'], state=UserTestState.try_drugs)
async def try_drugs_and_get_result(call: CallbackQuery, state: FSMContext):
    await state.update_data(try_drugs=int(call.data))
    data = await state.get_data()
    reply = await check_user_test(data)
    message_reply = '–í—ã –Ω–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç–µ ‚úÖ' if reply else '–•–µ—Ä –≤–∞–º, –∞ –Ω–µ —Å–ª—É–∂–±–∞ ‚õîÔ∏è'
    await call.message.answer(message_reply, reply_markup=main_menu_buttons)
    await check_user_test(data)
    await state.finish()


async def check_user_test(data):
    age = data.get('age')
    nationality = data.get('nationality')
    has_crime = data.get('has_crime')
    try_drugs = data.get('try_drugs')

    young = age < 18 or int(age) > 45
    other_staff = bool(has_crime) or bool(try_drugs) or not bool(nationality)

    if young or other_staff:
        return False
    return True
